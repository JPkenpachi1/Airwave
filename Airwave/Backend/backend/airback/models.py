from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models
import uuid
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    def __str__(self):
        return self.email

class Enquiry(models.Model):
    enquiry_start_date = models.DateField()
    booking_date = models.DateField(null=True, blank=True)
    enquiry_closer_date = models.DateField(null=True, blank=True)
    name = models.CharField(max_length=100)
    address = models.TextField()
    area = models.CharField(max_length=100)
    contact_no = models.CharField(max_length=15)
    enquiry_state = models.CharField(max_length=50)
    enquiry_status = models.CharField(max_length=50)
    assigned_to = models.CharField(max_length=100)
    submitted_by = models.CharField(max_length=100)
    resolution_summary = models.TextField(null=True, blank=True)
    remarks = models.TextField(null=True, blank=True)
    ending_status = models.CharField(max_length=50)

    def __str__(self):
        return self.name




class Technician(models.Model):
    name = models.CharField(max_length=100)
    technician_id = models.CharField(max_length=50, unique=True)
    mobile = models.CharField(max_length=15)
    status = models.CharField(max_length=20, choices=[('active', 'Active'), ('inactive', 'Inactive')])

    def __str__(self):
        return self.name

class Complaint(models.Model):
    name = models.CharField(max_length=100)
    phone = models.CharField(max_length=15)
    phone2 = models.CharField(max_length=15, blank=True, null=True)
    address = models.TextField()
    complaint_type = models.CharField(max_length=100)
    complaint_description = models.TextField()
    date = models.DateField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=[('open', 'Open'), ('resolved', 'Resolved'), ('in-progress', 'In Progress')], default='open')
    resolved_date = models.DateField(blank=True, null=True)
    technician = models.ForeignKey(Technician, on_delete=models.CASCADE)

    def __str__(self):
        return f"Complaint: {self.name} - {self.complaint_type}"

class UserProfile(models.Model):
    name = models.CharField(max_length=100)
    phone = models.CharField(max_length=15)
    phone2 = models.CharField(max_length=15, blank=True, null=True)
    address = models.CharField(max_length=255)
    uid = models.CharField(max_length=50, unique=True, editable=False, default=uuid.uuid4)  # Autogenerated UID
    username = models.CharField(max_length=30, unique=True)

    def __str__(self):
        return self.username